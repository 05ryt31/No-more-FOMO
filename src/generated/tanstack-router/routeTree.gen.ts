// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../../routes/__root'
import { Route as IndexRouteImport } from './../../routes/index'
import { Route as SettingsIndexRouteImport } from './../../routes/settings/index'
import { Route as PostIndexRouteImport } from './../../routes/post/index'
import { Route as MyEventsIndexRouteImport } from './../../routes/my-events/index'
import { Route as MapIndexRouteImport } from './../../routes/map/index'
import { Route as EventIdRouteImport } from './../../routes/event/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostIndexRoute = PostIndexRouteImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => rootRouteImport,
} as any)
const MyEventsIndexRoute = MyEventsIndexRouteImport.update({
  id: '/my-events/',
  path: '/my-events/',
  getParentRoute: () => rootRouteImport,
} as any)
const MapIndexRoute = MapIndexRouteImport.update({
  id: '/map/',
  path: '/map/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventIdRoute = EventIdRouteImport.update({
  id: '/event/$id',
  path: '/event/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/event/$id': typeof EventIdRoute
  '/map': typeof MapIndexRoute
  '/my-events': typeof MyEventsIndexRoute
  '/post': typeof PostIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/event/$id': typeof EventIdRoute
  '/map': typeof MapIndexRoute
  '/my-events': typeof MyEventsIndexRoute
  '/post': typeof PostIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/event/$id': typeof EventIdRoute
  '/map/': typeof MapIndexRoute
  '/my-events/': typeof MyEventsIndexRoute
  '/post/': typeof PostIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/event/$id' | '/map' | '/my-events' | '/post' | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/event/$id' | '/map' | '/my-events' | '/post' | '/settings'
  id:
    | '__root__'
    | '/'
    | '/event/$id'
    | '/map/'
    | '/my-events/'
    | '/post/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventIdRoute: typeof EventIdRoute
  MapIndexRoute: typeof MapIndexRoute
  MyEventsIndexRoute: typeof MyEventsIndexRoute
  PostIndexRoute: typeof PostIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post/': {
      id: '/post/'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof PostIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-events/': {
      id: '/my-events/'
      path: '/my-events'
      fullPath: '/my-events'
      preLoaderRoute: typeof MyEventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map/': {
      id: '/map/'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$id': {
      id: '/event/$id'
      path: '/event/$id'
      fullPath: '/event/$id'
      preLoaderRoute: typeof EventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventIdRoute: EventIdRoute,
  MapIndexRoute: MapIndexRoute,
  MyEventsIndexRoute: MyEventsIndexRoute,
  PostIndexRoute: PostIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
