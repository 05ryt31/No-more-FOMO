// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@postgres/app" // hardcoded because it's an internal docker connection
}

model University {
  id     String @id @default(cuid())
  name   String
  tz     String // timezone
  centerLat Float
  centerLng Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sources Source[]
  events  Event[]
  users   User[]

  @@map("universities")
}

model Source {
  id           String  @id @default(cuid())
  universityId String
  type         String  // 'ics' | 'html' | 'sns'
  url          String
  active       Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  events     Event[]

  @@map("sources")
}

model Event {
  id           String   @id @default(cuid())
  universityId String
  title        String
  description  String?
  start        DateTime
  end          DateTime?
  location     String?
  coordsLat    Float?
  coordsLng    Float?
  categories   String[] // Array of category strings
  image        String?  // URL to image
  sourceIds    String[] // Array of source IDs that contributed to this event
  dedupeKey    String   // For deduplication: normalized title + date + location
  popularity   Int      @default(0) // Based on Going/Interested counts
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  sources    Source[]
  userEvents UserEvent[]

  @@index([universityId, start])
  @@index([dedupeKey])
  @@map("events")
}

model User {
  id           String   @id @default(cuid())
  universityId String
  email        String   @unique // University email for authentication
  passwordHash String   // Hashed password using bcryptjs
  emailVerified Boolean  @default(false) // For future email verification
  isActive     Boolean  @default(true) // For deactivating accounts
  interests    String[] // Array of interest tags
  friends      String[] @default([]) // Array of user IDs (for future features)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  userEvents UserEvent[]

  @@map("users")
}

model UserEvent {
  id          String   @id @default(cuid())
  userId      String
  eventId     String
  status      String   @default("going") // 'going' | 'cancelled' | 'interested'
  customFields Json?   // Store custom registration form data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // Prevent duplicate registrations
  @@map("user_events")
}
